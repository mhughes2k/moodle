{"version":3,"file":"dropzone.min.js","sources":["../src/dropzone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to handle dropzone.\n *\n * @module     core/dropzone\n * @copyright  2024 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.4\n */\n\nimport Log from 'core/log';\nimport Templates from 'core/templates';\n\n/**\n * A dropzone.\n *\n * @class core/dropzone\n */\nconst DropZone = class {\n\n    /**\n     * Constructor.\n     *\n     * @param {Element} dropZoneElement The element to render the dropzone.\n     * @param {String} fileTypes The file types that are allowed to be uploaded. Example: image/*\n     * @param {CallableFunction} callback The function to call when a file is dropped.\n     */\n    constructor(dropZoneElement, fileTypes, callback) {\n        this.init(dropZoneElement, fileTypes, callback);\n    }\n\n    /**\n     * Initialise the dropzone.\n     *\n     * @param {Element} dropZoneElement The element to render the dropzone.\n     * @param {String} fileTypes The file types that are allowed to be uploaded. Example: image/*\n     * @param {CallableFunction} callback The function to call when a file is dropped.\n     * @returns {DropZone}\n     */\n    init(dropZoneElement, fileTypes, callback) {\n        dropZoneElement.addEventListener('dragover', (e) => {\n            const dropZone = this.getDropZoneFromEvent(e);\n            if (!dropZone) {\n                return;\n            }\n            e.preventDefault();\n            dropZone.classList.add('dragover');\n        });\n        dropZoneElement.addEventListener('dragleave', (e) => {\n            const dropZone = this.getDropZoneFromEvent(e);\n            if (!dropZone) {\n                return;\n            }\n            e.preventDefault();\n            dropZone.classList.remove('dragover');\n        });\n        dropZoneElement.addEventListener('drop', (e) => {\n            const dropZone = this.getDropZoneFromEvent(e);\n            if (!dropZone) {\n                return;\n            }\n            e.preventDefault();\n            dropZone.classList.remove('dragover');\n            callback(e.dataTransfer.files);\n        });\n        dropZoneElement.addEventListener('click', (e) => {\n            const dropZoneContainer = this.getDropZoneContainerFromEvent(e);\n            if (!dropZoneContainer) {\n                return;\n            }\n            this.getFileElementFromEvent(e).click();\n        });\n        dropZoneElement.addEventListener('click', (e) => {\n            const dropZoneLabel = e.target.closest('.dropzone-sr-only-focusable');\n            if (!dropZoneLabel) {\n                return;\n            }\n            this.getFileElementFromEvent(e).click();\n        });\n        dropZoneElement.addEventListener('change', (e) => {\n            const fileInput = this.getFileElementFromEvent(e);\n            if (fileInput) {\n                e.preventDefault();\n                callback(fileInput.files);\n            }\n        });\n        this.renderDropZone(dropZoneElement, fileTypes);\n        Log.info('Dropzone has been initialized!');\n        return this;\n    }\n\n    /**\n     * Get the dropzone.\n     *\n     * @param {Event} e The event.\n     * @returns {HTMLElement|bool}\n     */\n    getDropZoneFromEvent(e) {\n        return e.target.closest('.dropzone');\n    }\n\n    /**\n     * Get the dropzone container.\n     *\n     * @param {Event} e The event.\n     * @returns {HTMLElement|bool}\n     */\n    getDropZoneContainerFromEvent(e) {\n        return e.target.closest('.dropzone-container');\n    }\n\n    /**\n     * Get the file element.\n     *\n     * @param {Event} e The event.\n     * @returns {HTMLElement|bool}\n     */\n    getFileElementFromEvent(e) {\n        return e.target.closest('.dropzone-container').querySelector('.drop-zone-fileinput');\n    }\n\n    /**\n     * Render the dropzone.\n     *\n     * @param {Element} dropZoneElement The element to render the dropzone.\n     * @param {String} fileTypes The file types that are allowed to be uploaded.\n     * @returns {Promise}\n     */\n    async renderDropZone(dropZoneElement, fileTypes) {\n        dropZoneElement.innerHTML = await Templates.render('core/dropzone', {\n            fileTypes,\n        });\n    }\n};\n\nexport default DropZone;\n"],"names":["constructor","dropZoneElement","fileTypes","callback","init","addEventListener","e","dropZone","this","getDropZoneFromEvent","preventDefault","classList","add","remove","dataTransfer","files","getDropZoneContainerFromEvent","getFileElementFromEvent","click","target","closest","fileInput","renderDropZone","info","querySelector","innerHTML","Templates","render"],"mappings":";;;;;;;;kLAgCiB,MASbA,YAAYC,gBAAiBC,UAAWC,eAC/BC,KAAKH,gBAAiBC,UAAWC,UAW1CC,KAAKH,gBAAiBC,UAAWC,iBAC7BF,gBAAgBI,iBAAiB,YAAaC,UACpCC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUC,IAAI,gBAE3BX,gBAAgBI,iBAAiB,aAAcC,UACrCC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUE,OAAO,gBAE9BZ,gBAAgBI,iBAAiB,QAASC,UAChCC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUE,OAAO,YAC1BV,SAASG,EAAEQ,aAAaC,WAE5Bd,gBAAgBI,iBAAiB,SAAUC,IACbE,KAAKQ,8BAA8BV,SAIxDW,wBAAwBX,GAAGY,WAEpCjB,gBAAgBI,iBAAiB,SAAUC,IACjBA,EAAEa,OAAOC,QAAQ,qCAIlCH,wBAAwBX,GAAGY,WAEpCjB,gBAAgBI,iBAAiB,UAAWC,UAClCe,UAAYb,KAAKS,wBAAwBX,GAC3Ce,YACAf,EAAEI,iBACFP,SAASkB,UAAUN,gBAGtBO,eAAerB,gBAAiBC,wBACjCqB,KAAK,kCACFf,KASXC,qBAAqBH,UACVA,EAAEa,OAAOC,QAAQ,aAS5BJ,8BAA8BV,UACnBA,EAAEa,OAAOC,QAAQ,uBAS5BH,wBAAwBX,UACbA,EAAEa,OAAOC,QAAQ,uBAAuBI,cAAc,6CAU5CvB,gBAAiBC,WAClCD,gBAAgBwB,gBAAkBC,mBAAUC,OAAO,gBAAiB,CAChEzB,UAAAA"}