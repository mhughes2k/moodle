{"version":3,"file":"providervalidation.min.js","sources":["../src/providervalidation.js"],"sourcesContent":["import Ajax from 'core/ajax';\nexport const getConnectionStatus = (providername) => Ajax.call([{\n    methodname: 'core_ai_test_connection',\n    args: {providername},\n}])[0];\n\nconst Selectors = {\n    VALIDATE: '[data-action=\"validate-ai-provider\"]',\n    VALIDATE_RESULTS: '[data-role=\"validate-ai-results\"]',\n};\nconst AIProviderValidator = class {\n    /**\n     * AI Provider type.\n     */\n    providerType;\n\n    // /**\n    //  * Context ID.\n    //  * @type {Integer}\n    //  */\n    // contextId;\n\n    /**\n     *\n     * @param {string} providerType\n     // * @param {Integer }contextId\n     */\n    constructor(providerType) {//, contextId) {\n        this.providerType = providerType;\n        // this.contextId = contextId;\n        window.console.log(this.providerType);\n        this.registerEventListeners();\n    }\n    registerEventListeners() {\n\n        const providerResultSelector = Selectors.VALIDATE_RESULTS + '[data-providertype=\"'+this.providerType+'\"]';\n        const resultsArea = document.querySelector(providerResultSelector);\n        const validateButton = document.querySelector(Selectors.VALIDATE+ '[data-providertype=\"'+this.providerType+'\"]');\n        window.console.log(validateButton);\n        if (validateButton) {\n            window.console.log(`Adding click handler for ${this.providerType}`);\n            validateButton.addEventListener('click', async (e) => {\n                window.console.log(\"Clicked on provider validation \");\n                window.console.log(this.providerType);\n                e.preventDefault();\n                const request = {\n                    methodname: 'core_ai_test_connection',\n                    args: {\n                        providertype: this.providerType,\n                    }\n                };\n                try {\n                    const resultObj = await Ajax.call([\n                        request\n                    ])[0];\n                    if (resultObj.error) {\n                        window.console.log(resultObj.error);\n                        return;\n                    } else {\n                        window.console.log(resultObj);\n                        resultsArea.innerHTML = resultObj.message;\n                    }\n                } catch (error) {\n                    window.console.log(error);\n                }\n                window.console.log(\"Test connection finished\");\n            });\n        } else {\n            window.console.log(`No validate button found for ${providerResultSelector}`);\n        }\n    }\n};\n\nexport default AIProviderValidator;\n"],"names":["providername","Ajax","call","methodname","args","Selectors","constructor","providerType","window","console","log","this","registerEventListeners","providerResultSelector","resultsArea","document","querySelector","validateButton","addEventListener","async","e","preventDefault","request","providertype","resultObj","error","innerHTML","message"],"mappings":"4RACoCA,cAAiBC,cAAKC,KAAK,CAAC,CAC5DC,WAAY,0BACZC,KAAM,CAACJ,aAAAA,iBACP,SAEEK,mBACQ,uCADRA,2BAEgB,iDAEM,MAiBxBC,YAAYC,0LACHA,aAAeA,aAEpBC,OAAOC,QAAQC,IAAIC,KAAKJ,mBACnBK,yBAETA,+BAEUC,uBAAyBR,2BAA6B,uBAAuBM,KAAKJ,aAAa,KAC/FO,YAAcC,SAASC,cAAcH,wBACrCI,eAAiBF,SAASC,cAAcX,mBAAoB,uBAAuBM,KAAKJ,aAAa,MAC3GC,OAAOC,QAAQC,IAAIO,gBACfA,gBACAT,OAAOC,QAAQC,uCAAgCC,KAAKJ,eACpDU,eAAeC,iBAAiB,SAASC,MAAAA,IACrCX,OAAOC,QAAQC,IAAI,mCACnBF,OAAOC,QAAQC,IAAIC,KAAKJ,cACxBa,EAAEC,uBACIC,QAAU,CACZnB,WAAY,0BACZC,KAAM,CACFmB,aAAcZ,KAAKJ,yBAIjBiB,gBAAkBvB,cAAKC,KAAK,CAC9BoB,UACD,MACCE,UAAUC,kBACVjB,OAAOC,QAAQC,IAAIc,UAAUC,OAG7BjB,OAAOC,QAAQC,IAAIc,WACnBV,YAAYY,UAAYF,UAAUG,QAExC,MAAOF,OACLjB,OAAOC,QAAQC,IAAIe,OAEvBjB,OAAOC,QAAQC,IAAI,gCAGvBF,OAAOC,QAAQC,2CAAoCG"}