{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cohorts actions.\n *\n * @module     core_cohort/actions\n * @copyright  2024 David Woloszyn <david.woloszyn@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport {deleteCohorts} from 'core_cohort/repository';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {eventTypes} from 'core/local/inplace_editable/events';\n\nconst SELECTORS = {\n    CHECKBOXES: '[data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]:checked',\n    DELETEBUTTON: '[data-action=\"cohort-delete-selected\"]',\n    EDITNAME: '[data-itemtype=\"cohortname\"]',\n};\n\n/**\n * Initialise module.\n */\nexport const init = () => {\n\n    prefetchStrings('core_cohort', [\n        'delcohortsconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n        'deleteselected',\n        'selectitem',\n    ]);\n\n    registerEventListeners();\n};\n\n/**\n * Register event listeners.\n */\nexport const registerEventListeners = () => {\n\n    // Edit cohort name inplace.\n    document.addEventListener(eventTypes.elementUpdated, async(event) => {\n\n        const editCohortName = event.target.closest(SELECTORS.EDITNAME);\n\n        if (editCohortName) {\n            const newName = await getString('selectitem', 'core', event.target.dataset.value);\n            const cohortId = event.target.dataset.itemid;\n            const checkbox = document.querySelector(`input[value=\"${cohortId}\"]`);\n            const label = document.querySelector(`label[for=\"${checkbox.id}\"]`);\n\n            if (newName && label) {\n                label.innerHTML = newName;\n            }\n        }\n    });\n\n    // Delete multiple cohorts.\n    document.addEventListener('click', event => {\n\n        const cohortDeleteSelected = event.target.closest(SELECTORS.DELETEBUTTON);\n\n        if (cohortDeleteSelected) {\n            event.preventDefault();\n\n            const reportElement = document.querySelector(reportSelectors.regions.report);\n            const cohortDeleteChecked = reportElement.querySelectorAll(SELECTORS.CHECKBOXES);\n            if (cohortDeleteChecked.length === 0) {\n                return;\n            }\n\n            Notification.saveCancelPromise(\n                getString('deleteselected', 'core'),\n                getString('delcohortsconfirm', 'core_cohort'),\n                getString('delete', 'core'),\n                {triggerElement: cohortDeleteSelected}\n            ).then(() => {\n                const pendingPromise = new Pending('core_cohort/cohorts:delete');\n                const deleteCohortIds = [...cohortDeleteChecked].map(check => check.value);\n\n                // eslint-disable-next-line promise/no-nesting\n                return deleteCohorts(deleteCohortIds)\n                    .then(() => {\n                        dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\n                        return pendingPromise.resolve();\n                    })\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n    });\n};\n"],"names":["SELECTORS","registerEventListeners","document","addEventListener","eventTypes","elementUpdated","async","event","target","closest","newName","dataset","value","cohortId","itemid","checkbox","querySelector","label","id","innerHTML","cohortDeleteSelected","preventDefault","reportElement","reportSelectors","regions","report","cohortDeleteChecked","querySelectorAll","length","saveCancelPromise","triggerElement","then","pendingPromise","Pending","deleteCohortIds","map","check","reportEvents","tableReload","preservePagination","resolve","catch","Notification","exception"],"mappings":";;;;;;;kUAiCMA,qBACU,sEADVA,uBAEY,yCAFZA,mBAGQ,6CAMM,mCAEA,cAAe,CAC3B,oDAGY,OAAQ,CACpB,SACA,iBACA,eAGJC,gCAMSA,uBAAyB,KAGlCC,SAASC,iBAAiBC,oBAAWC,gBAAgBC,MAAAA,WAE1BC,MAAMC,OAAOC,QAAQT,oBAExB,OACVU,cAAgB,kBAAU,aAAc,OAAQH,MAAMC,OAAOG,QAAQC,OACrEC,SAAWN,MAAMC,OAAOG,QAAQG,OAChCC,SAAWb,SAASc,qCAA8BH,gBAClDI,MAAQf,SAASc,mCAA4BD,SAASG,UAExDR,SAAWO,QACXA,MAAME,UAAYT,aAM9BR,SAASC,iBAAiB,SAASI,cAEzBa,qBAAuBb,MAAMC,OAAOC,QAAQT,2BAE9CoB,qBAAsB,CACtBb,MAAMc,uBAEAC,cAAgBpB,SAASc,cAAcO,gBAAgBC,QAAQC,QAC/DC,oBAAsBJ,cAAcK,iBAAiB3B,yBACxB,IAA/B0B,oBAAoBE,oCAIXC,mBACT,kBAAU,iBAAkB,SAC5B,kBAAU,oBAAqB,gBAC/B,kBAAU,SAAU,QACpB,CAACC,eAAgBV,uBACnBW,MAAK,WACGC,eAAiB,IAAIC,iBAAQ,8BAC7BC,gBAAkB,IAAIR,qBAAqBS,KAAIC,OAASA,MAAMxB,eAG7D,6BAAcsB,iBAChBH,MAAK,yCACYM,aAAaC,YAAa,CAACC,oBAAoB,GAAOjB,eAC7DU,eAAeQ,aAEzBC,MAAMC,sBAAaC,cACzBF,OAAM"}